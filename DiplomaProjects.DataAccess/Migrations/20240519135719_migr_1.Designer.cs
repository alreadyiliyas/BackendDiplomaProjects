// <auto-generated />
using System;
using DiplomaProjects.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiplomaProjects.DataAccess.Migrations
{
    [DbContext(typeof(DiplomaDbContext))]
    [Migration("20240519135719_migr_1")]
    partial class migr_1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.AddressOfHouseEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApartmentNumber")
                        .HasColumnType("text");

                    b.Property<string>("HouseNumber")
                        .HasColumnType("text");

                    b.Property<int?>("MicroDistrictsId")
                        .HasColumnType("integer");

                    b.Property<int>("StreetsId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MicroDistrictsId");

                    b.HasIndex("StreetsId");

                    b.HasIndex("UserId");

                    b.ToTable("AddressOfHouses");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.CitiesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CitiesName")
                        .HasColumnType("text");

                    b.Property<int>("RegionsId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RegionsId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.CountriesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountriesName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.DistrictsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CitiesId")
                        .HasColumnType("integer");

                    b.Property<string>("DistrictsName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CitiesId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.MicroDistrictsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DistrictsId")
                        .HasColumnType("integer");

                    b.Property<string>("MicroDistrictsName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DistrictsId");

                    b.ToTable("MicroDistricts");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.RegionsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountriesId")
                        .HasColumnType("integer");

                    b.Property<string>("RegionsName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountriesId");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.StreetDistrictsEntity", b =>
                {
                    b.Property<int>("StreetsId")
                        .HasColumnType("integer");

                    b.Property<int>("DistrictsId")
                        .HasColumnType("integer");

                    b.HasKey("StreetsId", "DistrictsId");

                    b.HasIndex("DistrictsId");

                    b.ToTable("StreetDistricts");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.StreetsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StreetsName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Application.ApplicationsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ModeratorId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusesId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("StatusesId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Application.StatusesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusesName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.RoleEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.SpecialtiesEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("SpecialtiesName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Specialties");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("GuidUserId")
                        .HasColumnType("uuid");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.UserInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IdentityNumberKZT")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserInfo");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.WorkerInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkerInfo");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.WorkerSpecialtyEntity", b =>
                {
                    b.Property<int>("WorkerId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecialtyId")
                        .HasColumnType("integer");

                    b.HasKey("WorkerId", "SpecialtyId");

                    b.HasIndex("SpecialtyId");

                    b.ToTable("WorkerSpecialtyEntities");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.AddressOfHouseEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Address.MicroDistrictsEntity", "MicroDistricts")
                        .WithMany()
                        .HasForeignKey("MicroDistrictsId");

                    b.HasOne("DiplomaProjects.DataAccess.Entities.Address.StreetsEntity", "Streets")
                        .WithMany()
                        .HasForeignKey("StreetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaProjects.DataAccess.Entities.Users.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MicroDistricts");

                    b.Navigation("Streets");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.CitiesEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Address.RegionsEntity", "Regions")
                        .WithMany()
                        .HasForeignKey("RegionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.DistrictsEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Address.CitiesEntity", "Cities")
                        .WithMany()
                        .HasForeignKey("CitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.MicroDistrictsEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Address.DistrictsEntity", "Districts")
                        .WithMany()
                        .HasForeignKey("DistrictsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.RegionsEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Address.CountriesEntity", "Countries")
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.StreetDistrictsEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Address.DistrictsEntity", "Districts")
                        .WithMany("StreetDistricts")
                        .HasForeignKey("DistrictsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaProjects.DataAccess.Entities.Address.StreetsEntity", "Streets")
                        .WithMany("StreetDistricts")
                        .HasForeignKey("StreetsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Districts");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Application.ApplicationsEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Users.UserEntity", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaProjects.DataAccess.Entities.Users.UserEntity", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DiplomaProjects.DataAccess.Entities.Users.UserEntity", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId");

                    b.HasOne("DiplomaProjects.DataAccess.Entities.Application.StatusesEntity", "Statuses")
                        .WithMany()
                        .HasForeignKey("StatusesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Moderator");

                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.UserEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Users.RoleEntity", "UserRole")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.UserInfoEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Users.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.WorkerInfoEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Users.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.WorkerSpecialtyEntity", b =>
                {
                    b.HasOne("DiplomaProjects.DataAccess.Entities.Users.SpecialtiesEntity", "Specialty")
                        .WithMany()
                        .HasForeignKey("SpecialtyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaProjects.DataAccess.Entities.Users.WorkerInfoEntity", "Worker")
                        .WithMany("Specialties")
                        .HasForeignKey("WorkerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialty");

                    b.Navigation("Worker");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.DistrictsEntity", b =>
                {
                    b.Navigation("StreetDistricts");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Address.StreetsEntity", b =>
                {
                    b.Navigation("StreetDistricts");
                });

            modelBuilder.Entity("DiplomaProjects.DataAccess.Entities.Users.WorkerInfoEntity", b =>
                {
                    b.Navigation("Specialties");
                });
#pragma warning restore 612, 618
        }
    }
}
